openapi: 3.0.3
info:
  contact:
    name: Aptos
    url: https://github.com/aptos-labs/aptos-core
  description: |
    The Aptos Node API is a RESTful API for client applications to interact with the Aptos blockchain.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Aptos Dev API Specification
  version: 0.1.1
servers:
- url: /
tags:
- description: General information
  name: general
- description: Access to transactions
  name: transactions
- description: Access to account resources and modules
  name: accounts
- description: Access to events
  name: events
paths:
  /:
    get:
      operationId: get_ledger_info
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerInfo'
          description: Returns the latest ledger information.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Ledger information
      tags:
      - general
  /spec.html:
    get:
      operationId: get_spec_html
      responses:
        "200":
          description: Returns OpenAPI specification html document.
        "400":
          description: Bad Request
      summary: API document
      tags:
      - general
  /openapi.yaml:
    get:
      operationId: get_spec_yaml
      responses:
        "200":
          description: Returns OpenAPI specification YAML document.
        "400":
          description: Bad Request
      summary: OpenAPI specification
      tags:
      - general
  /accounts/{address}:
    get:
      operationId: get_account
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Returns the latest account core data resource.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get account
      tags:
      - accounts
      - state
  /accounts/{address}/resources:
    get:
      operationId: get_account_resources
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - explode: true
        in: query
        name: version
        required: false
        schema:
          $ref: '#/components/schemas/LedgerVersion'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccountResource'
                type: array
          description: |
            This API returns account resources for a specific ledger version (AKA transaction version).
            If not present, the latest version is used.

            The Aptos nodes prune account state history, via a configurable time window (link).

            If the requested data has been pruned, the server responds with a 404
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get account resources
      tags:
      - accounts
      - state
  /accounts/{address}/resource/{resource_type}:
    get:
      description: |
        This API renders a resource identified by the owner account
        `address` and the `resource_type`, at a ledger version (AKA
        transaction version) specified as a query param, otherwise the
        latest version is used.
      operationId: get_account_resource
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - example: 0x1::AptosAccount::AptosAccount
        explode: false
        in: path
        name: resource_type
        required: true
        schema:
          $ref: '#/components/schemas/MoveStructTagId'
        style: simple
      - explode: true
        in: query
        name: version
        required: false
        schema:
          $ref: '#/components/schemas/LedgerVersion'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResource'
          description: Returns a resource.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get resource by account address and resource type.
      tags:
      - accounts
      - state
  /accounts/{address}/modules:
    get:
      operationId: get_account_modules
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - explode: true
        in: query
        name: version
        required: false
        schema:
          $ref: '#/components/schemas/LedgerVersion'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MoveModule'
                type: array
          description: |
            This API returns account modules for a specific ledger version (AKA transaction version).
            If not present, the latest version is used.

            The Aptos nodes prune account state history, via a configurable time window (link).

            If the requested data has been pruned, the server responds with a 404
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get account modules
      tags:
      - accounts
      - state
  /accounts/{address}/module/{module_name}:
    get:
      description: |
        This API renders a Move module identified by the module id. A
        module id consists of the module owner `address` and the
        `module_name`. The module is rendered at a ledger version (AKA
        transaction version) specified as a query param, otherwise the
        latest version is used.
      operationId: get_account_module
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - description: The name of the module.
        example: GUID
        explode: false
        in: path
        name: module_name
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: version
        required: false
        schema:
          $ref: '#/components/schemas/LedgerVersion'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveModule'
          description: Returns a move module.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get module by module id.
      tags:
      - accounts
      - state
  /transactions:
    get:
      operationId: get_transactions
      parameters:
      - description: The start transaction version of the page. Default is the latest
          ledger version.
        example: 1
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: integer
        style: form
      - description: The max number of transactions should be returned for the page.
          Default is 25.
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OnChainTransaction'
                type: array
          description: Returns on-chain transactions, paginated.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get transactions
      tags:
      - transactions
    post:
      description: |
        **Submit transaction using JSON without additional tools**

          * Send [POST /transactions/signing_message](#operation/create-signing-message) to create transaction signing message.
          * Sign the transaction signing message and create transaction signature.
          * Submit the user transaction request with the transaction siganture. The request header "Content-Type" must set to "application/json".
      operationId: submit_transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitTransactionRequest'
        description: |
          User transaction request with transaction sender's signature.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingTransaction'
          description: Transaction is accepted and submitted to mempool.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "413":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 413
                  message: The request payload is too large
          description: |
            The request payload is too large.
        "415":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 415
                  message: The request's content-type is not supported
          description: |
            The request's content-type is not supported.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Submit transaction
      tags:
      - transactions
  /accounts/{address}/transactions:
    get:
      operationId: get_account_transactions
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - description: The start transaction version of the page. Default is the latest
          ledger version.
        example: 1
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: integer
        style: form
      - description: The max number of transactions should be returned for the page.
          Default is 25.
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OnChainTransaction'
                type: array
          description: Returns on-chain transactions, paginated.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get account transactions
      tags:
      - transactions
  /transactions/{txn_hash_or_version}:
    get:
      description: |
        There are two types of transaction identifiers:
          1. Transaction hash: included in any transaction JSON respond from server.
          2. Transaction version: included in on-chain transaction JSON respond from server.

        When given transaction hash, server first looks up on-chain transaction by hash;
        if no on-chain transaction found, then look up transaction by hash in the mempool
        (pending) transactions.

        When given a transaction version, server looks up the transaction on-chain by version.

        To create a transaction hash:
          1. Create hash message bytes: "Aptos::Transaction" bytes + BCS bytes of [Transaction](https://aptos-labs.github.io/aptos-core/aptos_types/transaction/enum.Transaction.html).
          2. Apply hash algorithm `SHA3-256` to the hash message bytes.
          3. Hex-encode the hash bytes with `0x` prefix.
      operationId: get_transaction
      parameters:
      - description: |
          * Transaction hash should be hex-encoded bytes string with `0x` prefix.
          * Transaction version is an `uint64` number.
        explode: false
        in: path
        name: txn_hash_or_version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: |
            Returns a pending / on-chain transaction.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get transaction
      tags:
      - transactions
  /transactions/signing_message:
    post:
      description: |
        This API creates transaction signing message for client to create
        transaction signature.

        The success response contains hex-encoded signing message bytes.

        **To sign the message**

          1. Client first needs to HEX decode the `message` into bytes.
          2. Then sign the bytes to create signature.
      operationId: create_signing_message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTransactionRequest'
        description: User transaction request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: |
            Returns hex-encoded transaction signing message bytes.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "413":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 413
                  message: The request payload is too large
          description: |
            The request payload is too large.
        "415":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 415
                  message: The request's content-type is not supported
          description: |
            The request's content-type is not supported.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Create transaction signing message
      tags:
      - transactions
  /events/{event_key}:
    get:
      operationId: get_events_by_event_key
      parameters:
      - description: |
          Event key for an event stream.
          It is BCS serialized bytes of `guid` field in the Move struct `EventHandle`.
        explode: false
        in: path
        name: event_key
        required: true
        schema:
          $ref: '#/components/schemas/HexEncodedBytes'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: |
            Returns events
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get events by event key
      tags:
      - events
  /accounts/{address}/events/{event_handle_struct}/{field_name}:
    get:
      description: |
        This API extracts event key from the account resource identified
        by the `event_handle_struct` and `field_name`, then returns
        events identified by the event key.
      operationId: get_events_by_event_handle
      parameters:
      - explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      - example: 0x1::AptosAccount::AptosAccount
        explode: false
        in: path
        name: event_handle_struct
        required: true
        schema:
          $ref: '#/components/schemas/MoveStructTagId'
        style: simple
      - description: |
          The field name of the `EventHandle` in the struct.
        example: sent_events
        explode: false
        in: path
        name: field_name
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The start sequence number in the EVENT STREAM, defaulting to the latest event.
          The events are returned in the reverse order of sequence numbers.
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: integer
        style: form
      - description: The number of events to be returned for the page default is 5
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Event'
                type: array
          description: |
            Returns events
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get events by event handle
      tags:
      - events
  /tables/{table_handle}/item:
    post:
      description: |
        Gets a table item for a table identified by the handle and the key for the item.
        Key and value types need to be passed in to help with key serialization and value deserialization.
      operationId: get_table_item
      parameters:
      - example: "1283023094380"
        explode: false
        in: path
        name: table_handle
        required: true
        schema:
          description: the table handle
          format: uint128
          title: Table Handle
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableItemRequest'
        description: Table item request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Returns the table item value rendered in JSON.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 400
                  message: invalid parameter
          description: |
            Bad request due to a client error: invalid request headers, parameters or body.
            Client should not retry the request without modification.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 404
                  message: resource not found
                  aptos_ledger_version: "37829327"
          description: |
            Resource or data not found.
            Client may retry the request if it is waiting for transaction execution or ledger synchronization.
        "413":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 413
                  message: The request payload is too large
          description: |
            The request payload is too large.
        "415":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 415
                  message: The request's content-type is not supported
          description: |
            The request's content-type is not supported.
        "500":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/AptosError'
                example:
                  code: 500
                  message: unexpected internal error
          description: |
            Server internal error, caused by unexpected issues.
      summary: Get table item by handle and key.
      tags:
      - state
      - table
components:
  parameters:
    AccountAddress:
      explode: false
      in: path
      name: address
      required: true
      schema:
        $ref: '#/components/schemas/Address'
      style: simple
    LedgerVersion:
      explode: true
      in: query
      name: version
      required: false
      schema:
        $ref: '#/components/schemas/LedgerVersion'
      style: form
    StartVersion:
      description: The start transaction version of the page. Default is the latest
        ledger version.
      example: 1
      explode: true
      in: query
      name: start
      required: false
      schema:
        type: integer
      style: form
    Limit:
      description: The max number of transactions should be returned for the page.
        Default is 25.
      example: 25
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: integer
      style: form
    EventStart:
      description: |
        The start sequence number in the EVENT STREAM, defaulting to the latest event.
        The events are returned in the reverse order of sequence numbers.
      explode: true
      in: query
      name: start
      required: false
      schema:
        type: integer
      style: form
    EventLimit:
      description: The number of events to be returned for the page default is 5
      example: 25
      explode: true
      in: query
      name: limit
      required: false
      schema:
        type: integer
      style: form
  responses:
    "400":
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/AptosError'
            example:
              code: 400
              message: invalid parameter
      description: |
        Bad request due to a client error: invalid request headers, parameters or body.
        Client should not retry the request without modification.
    "404":
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/AptosError'
            example:
              code: 404
              message: resource not found
              aptos_ledger_version: "37829327"
      description: |
        Resource or data not found.
        Client may retry the request if it is waiting for transaction execution or ledger synchronization.
    "413":
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/AptosError'
            example:
              code: 413
              message: The request payload is too large
      description: |
        The request payload is too large.
    "415":
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/AptosError'
            example:
              code: 415
              message: The request's content-type is not supported
      description: |
        The request's content-type is not supported.
    "500":
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/AptosError'
            example:
              code: 500
              message: unexpected internal error
      description: |
        Server internal error, caused by unexpected issues.
  schemas:
    AptosError:
      properties:
        code:
          type: integer
        message:
          type: string
        aptos_ledger_version:
          description: |
            The version of the latest transaction in the ledger.
          example: "52635485"
          format: uint64
          title: Ledger Version
          type: string
      required:
      - code
      - message
      title: Response Error
      type: object
    Uint64:
      description: Unsigned int64 type value
      example: "32425224034"
      format: uint64
      title: uint64
      type: string
    Address:
      description: |
        Hex-encoded 16 bytes Aptos account address.

        Prefixed with `0x` and leading zeros are trimmed.

        See [doc](https://diem.github.io/move/address.html) for more details.
      example: 0xdd
      format: address
      title: Account Address
      type: string
    HexEncodedBytes:
      description: |
        All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
        two hex digits per byte.

        Different with `Address` type, hex-encoded bytes should not trim any zeros.
      example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
      format: hex
      title: Hex-encoded Bytes
      type: string
    TimestampSec:
      description: |
        Timestamp in seconds, e.g. transaction expiration timestamp.
      example: "1635447454"
      format: uint64
      title: Timestamp in Seconds
      type: string
    TimestampUsec:
      description: |
        Timestamp in microseconds, e.g. ledger / block creation timestamp.
      example: "1632507671675208"
      format: uint64
      title: Timestamp in Microseconds
      type: string
    LedgerVersion:
      description: |
        The version of the latest transaction in the ledger.
      example: "52635485"
      format: uint64
      title: Ledger Version
      type: string
    EventKey:
      description: |
        Event key is a global index for an event stream.

        It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is
        a combination of a `uint64` creation number and account address
        (without trimming leading zeros).

        For example, event key `0x00000000000000000000000000000000000000000a550c18`
        is combined by the following 2 parts:
          1. `0000000000000000`: `uint64` representation of `0`.
          2. `0000000000000000000000000a550c18`: 16 bytes of account address.
      example: 0x00000000000000000000000000000000000000000a550c18
      format: hex
      title: Event Key
      type: string
    EventSequenceNumber:
      description: |
        Event `sequence_number` is unique id of an event in an event stream.
        Event `sequence_number` starts from 0 for each event key.
      example: "23"
      format: uint64
      title: Event Sequence Number
      type: string
    LedgerInfo:
      example:
        ledger_version: "52635485"
        chain_id: 4
        ledger_timestamp: "1632507671675208"
      properties:
        chain_id:
          description: |
            The blockchain chain id.
          example: 4
          type: integer
        ledger_version:
          description: |
            The version of the latest transaction in the ledger.
          example: "52635485"
          format: uint64
          title: Ledger Version
          type: string
        ledger_timestamp:
          description: |
            Timestamp in microseconds, e.g. ledger / block creation timestamp.
          example: "1632507671675208"
          format: uint64
          title: Timestamp in Microseconds
          type: string
      required:
      - chain_id
      - ledger_timestamp
      - ledger_version
      title: Ledger Information
      type: object
    Account:
      description: Core account resource, used for identifying account and transaction
        execution.
      example:
        sequence_number: "1"
        authentication_key: 0x5307b5f4bc67829097a8ba9b43dba3b88261eeccd1f709d9bde240fc100fbb69
      properties:
        sequence_number:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        authentication_key:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - authentication_key
      - sequence_number
      title: Account
      type: object
    AccountResource:
      description: Account resource is a Move struct value belongs to an account.
      example:
        type: 0x1::AptosAccount::Balance<0x1::XDX::XDX>
        data:
          coin:
            value: "8000000000"
      properties:
        type:
          description: |
            String representation of an on-chain Move struct type.

            It is a combination of:
              1. `Move module address`, `module name` and `struct name` joined by `::`.
              2. `struct generic type parameters` joined by `, `.

            Examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).

            See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.
          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
          format: move_type
          pattern: ^0x[0-9a-zA-Z:_<>]+$
          title: Move Struct Tag ID
          type: string
        data:
          description: |
            Account resource data is JSON representation of the Move struct `type`.

            Move struct field name and value are serialized as object property name and value.
          type: object
      required:
      - data
      - type
      title: Account Resource
      type: object
    MoveTypeTagId:
      description: |
        String representation of an on-chain Move type tag that is exposed in transaction payload.

        Values:
          - bool
          - u8
          - u64
          - u128
          - address
          - signer
          - vector: `vector<{non-reference MoveTypeId}>`
          - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`

        Vector type value examples:
          * `vector<u8>`
          * `vector<vector<u64>>`
          * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

        Struct type value examples:
          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
          * `0x1::AptosAccount::AccountOperationsCapability`

        Note:
          1. Empty chars should be ignored when comparing 2 struct tag ids.
          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
      example: 0x1::XUS::XUS
      pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$
      title: Move Type Tag ID
      type: string
    MoveTypeId:
      description: |
        String representation of an on-chain Move type identifier defined by the Move language.

        Values:
          - bool
          - u8
          - u64
          - u128
          - address
          - signer
          - vector: `vector<{non-reference MoveTypeId}>`
          - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`
          - reference: immutable `&` and mutable `&mut` references.
          - generic_type_parameter: it is always start with `T` and following an index number,
            which is the position of the generic type parameter in the `struct` or
            `function` generic type parameters definition.

        Vector type value examples:
          * `vector<u8>`
          * `vector<vector<u64>>`
          * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

        Struct type value examples:
          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
          * `0x1::AptosAccount::AccountOperationsCapability`

        Reference type value examples:
          * `&signer`
          * `&mut address`
          * `&mut vector<u8>`

        Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:

            {
                "name": "TransactionFee",
                "is_native": false,
                "abilities": ["key"],
                "generic_type_params": [
                    {"constraints": [], "is_phantom": true}
                ],
                "fields": [
                    { "name": "balance", "type": "0x1::Aptos::Aptos<T0>" },
                    { "name": "preburn", "type": "0x1::Aptos::Preburn<T0>" }
                ]
            }

        It's Move source code:

            module AptosFramework::TransactionFee {
                struct TransactionFee<phantom CoinType> has key {
                    balance: Aptos<CoinType>,
                    preburn: Preburn<CoinType>,
                }
            }

        The `T0` in the above JSON representation is the generic type place holder for
        the `CoinType` in the Move source code.

        Note:
          1. Empty chars should be ignored when comparing 2 struct tag ids.
          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
      example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
      pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut
        )?.+$|T\d+)$
      title: Move Type ID
      type: string
    MoveStructTagId:
      description: |
        String representation of an on-chain Move struct type.

        It is a combination of:
          1. `Move module address`, `module name` and `struct name` joined by `::`.
          2. `struct generic type parameters` joined by `, `.

        Examples:
          * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
          * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
          * `0x1::AptosAccount::AccountOperationsCapability`

        Note:
          1. Empty chars should be ignored when comparing 2 struct tag ids.
          2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).

        See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.
      example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
      format: move_type
      pattern: ^0x[0-9a-zA-Z:_<>]+$
      title: Move Struct Tag ID
      type: string
    MoveModule:
      example:
        bytecode: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
        abi:
          address: 0xdd
          structs:
          - name: Balance
            is_native: false
            abilities:
            - key
            generic_type_params:
            - constraints: []
              is_phantom: true
            fields:
            - name: coin
              type: 0x1::Aptos::Aptos<T0>
          - name: Balance
            is_native: false
            abilities:
            - key
            generic_type_params:
            - constraints: []
              is_phantom: true
            fields:
            - name: coin
              type: 0x1::Aptos::Aptos<T0>
          name: Aptos
          exposed_functions:
          - name: peer_to_peer_with_metadata
            visibility: script
            generic_type_params:
            - constraints: []
            params:
            - signer
            - address
            - u64
            - vector<u8>
            - vector<u8>
            return: []
          - name: peer_to_peer_with_metadata
            visibility: script
            generic_type_params:
            - constraints: []
            params:
            - signer
            - address
            - u64
            - vector<u8>
            - vector<u8>
            return: []
          friends:
          - 0x1::Aptos
          - 0x1::Aptos
      properties:
        bytecode:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        abi:
          $ref: '#/components/schemas/MoveModuleABI'
      required:
      - bytecode
      title: Move Module
      type: object
    MoveModuleABI:
      description: |
        Move Module ABI is JSON representation of Move module binary interface.
      example:
        address: 0xdd
        structs:
        - name: Balance
          is_native: false
          abilities:
          - key
          generic_type_params:
          - constraints: []
            is_phantom: true
          fields:
          - name: coin
            type: 0x1::Aptos::Aptos<T0>
        - name: Balance
          is_native: false
          abilities:
          - key
          generic_type_params:
          - constraints: []
            is_phantom: true
          fields:
          - name: coin
            type: 0x1::Aptos::Aptos<T0>
        name: Aptos
        exposed_functions:
        - name: peer_to_peer_with_metadata
          visibility: script
          generic_type_params:
          - constraints: []
          params:
          - signer
          - address
          - u64
          - vector<u8>
          - vector<u8>
          return: []
        - name: peer_to_peer_with_metadata
          visibility: script
          generic_type_params:
          - constraints: []
          params:
          - signer
          - address
          - u64
          - vector<u8>
          - vector<u8>
          return: []
        friends:
        - 0x1::Aptos
        - 0x1::Aptos
      properties:
        address:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        name:
          example: Aptos
          type: string
        friends:
          items:
            $ref: '#/components/schemas/MoveModuleId'
          type: array
        exposed_functions:
          items:
            $ref: '#/components/schemas/MoveFunction'
          type: array
        structs:
          items:
            $ref: '#/components/schemas/MoveStruct'
          type: array
      required:
      - address
      - exposed_functions
      - friends
      - name
      - structs
      title: Move Module ABI
      type: object
    MoveStruct:
      example:
        name: Balance
        is_native: false
        abilities:
        - key
        generic_type_params:
        - constraints: []
          is_phantom: true
        fields:
        - name: coin
          type: 0x1::Aptos::Aptos<T0>
      properties:
        name:
          type: string
        is_native:
          type: boolean
        abilities:
          items:
            $ref: '#/components/schemas/MoveAbility'
          type: array
        generic_type_params:
          items:
            $ref: '#/components/schemas/MoveStruct_generic_type_params'
          type: array
        fields:
          items:
            $ref: '#/components/schemas/MoveStructField'
          type: array
      required:
      - abilities
      - fields
      - generic_type_params
      - is_native
      - name
      title: Move Struct
      type: object
    MoveStructField:
      example:
        name: value
        type: u64
      properties:
        name:
          type: string
        type:
          description: |
            String representation of an on-chain Move type identifier defined by the Move language.

            Values:
              - bool
              - u8
              - u64
              - u128
              - address
              - signer
              - vector: `vector<{non-reference MoveTypeId}>`
              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`
              - reference: immutable `&` and mutable `&mut` references.
              - generic_type_parameter: it is always start with `T` and following an index number,
                which is the position of the generic type parameter in the `struct` or
                `function` generic type parameters definition.

            Vector type value examples:
              * `vector<u8>`
              * `vector<vector<u64>>`
              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

            Struct type value examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Reference type value examples:
              * `&signer`
              * `&mut address`
              * `&mut vector<u8>`

            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:

                {
                    "name": "TransactionFee",
                    "is_native": false,
                    "abilities": ["key"],
                    "generic_type_params": [
                        {"constraints": [], "is_phantom": true}
                    ],
                    "fields": [
                        { "name": "balance", "type": "0x1::Aptos::Aptos<T0>" },
                        { "name": "preburn", "type": "0x1::Aptos::Preburn<T0>" }
                    ]
                }

            It's Move source code:

                module AptosFramework::TransactionFee {
                    struct TransactionFee<phantom CoinType> has key {
                        balance: Aptos<CoinType>,
                        preburn: Preburn<CoinType>,
                    }
                }

            The `T0` in the above JSON representation is the generic type place holder for
            the `CoinType` in the Move source code.

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut
            )?.+$|T\d+)$
          title: Move Type ID
          type: string
      required:
      - name
      - type
      title: Move Struct Field
      type: object
    MoveFunction:
      example:
        name: peer_to_peer_with_metadata
        visibility: script
        generic_type_params:
        - constraints: []
        params:
        - signer
        - address
        - u64
        - vector<u8>
        - vector<u8>
        return: []
      properties:
        name:
          description: Move function name
          type: string
        visibility:
          enum:
          - public
          - script
          - friend
          type: string
        generic_type_params:
          items:
            $ref: '#/components/schemas/MoveFunction_generic_type_params'
          type: array
        params:
          items:
            $ref: '#/components/schemas/MoveTypeId'
          type: array
        return:
          items:
            $ref: '#/components/schemas/MoveTypeId'
          type: array
      required:
      - generic_type_params
      - name
      - params
      - return
      - visibility
      title: Move Function
      type: object
    MoveAbility:
      description: |
        Abilities are a typing feature in Move that control what actions are permissible for values of a given type.

        See [doc](https://diem.github.io/move/abilities.html) for more details.
      enum:
      - copy
      - drop
      - store
      - key
      example: key
      title: Move Ability
      type: string
    MoveModuleId:
      description: |
        Move module id is a string representation of Move module.

        Format: "{address}::{module name}"

        `address` should be hex-encoded 16 bytes account address
        that is prefixed with `0x` and leading zeros are trimmed.

        Module name is case-sensitive.

        See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.
      example: 0x1::Aptos
      title: Move Module ID
      type: string
    UserTransactionRequest:
      example:
        sequence_number: "32425224034"
        gas_currency_code: XDX
        sender: 0xdd
        gas_unit_price: "32425224034"
        max_gas_amount: "32425224034"
        expiration_timestamp_secs: "1635447454"
      properties:
        sender:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        sequence_number:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        max_gas_amount:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        gas_unit_price:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        gas_currency_code:
          example: XDX
          type: string
        expiration_timestamp_secs:
          description: |
            Timestamp in seconds, e.g. transaction expiration timestamp.
          example: "1635447454"
          format: uint64
          title: Timestamp in Seconds
          type: string
        payload:
          $ref: '#/components/schemas/TransactionPayload'
      required:
      - expiration_timestamp_secs
      - gas_currency_code
      - gas_unit_price
      - max_gas_amount
      - payload
      - sender
      - sequence_number
      title: User Transaction Request
      type: object
    UserTransactionSignature:
      description: |
        This schema is used for appending `signature` field to another schema.
      properties:
        signature:
          $ref: '#/components/schemas/TransactionSignature'
      required:
      - signature
      title: User Transaction Signature
      type: object
    Transaction:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/PendingTransaction'
      - $ref: '#/components/schemas/GenesisTransaction'
      - $ref: '#/components/schemas/UserTransaction'
      - $ref: '#/components/schemas/BlockMetadataTransaction'
    SubmitTransactionRequest:
      allOf:
      - $ref: '#/components/schemas/UserTransactionRequest'
      - $ref: '#/components/schemas/UserTransactionSignature'
      title: Submit Transaction Request
      type: object
    PendingTransaction:
      allOf:
      - $ref: '#/components/schemas/PendingTransaction_allOf'
      - $ref: '#/components/schemas/UserTransactionRequest'
      - $ref: '#/components/schemas/UserTransactionSignature'
      title: Pending Transaction
      type: object
    OnChainTransaction:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/GenesisTransaction'
      - $ref: '#/components/schemas/UserTransaction'
      - $ref: '#/components/schemas/BlockMetadataTransaction'
      title: On-chain Transaction
    OnChainTransactionInfo:
      properties:
        version:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        state_root_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        event_root_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        gas_used:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        success:
          description: |
            Transaction execution result (success: true, failure: false).
            See `vm_status` for human readable error message from Aptos VM.
          type: boolean
        vm_status:
          description: |
            Human readable transaction execution result message from Aptos VM.
          type: string
        accumulator_root_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        changes:
          items:
            $ref: '#/components/schemas/WriteSetChange'
          type: array
      required:
      - accumulator_root_hash
      - changes
      - event_root_hash
      - gas_used
      - hash
      - state_root_hash
      - success
      - version
      - vm_status
      title: On-chain transaction information
      type: object
    UserTransaction:
      allOf:
      - $ref: '#/components/schemas/UserTransaction_allOf'
      - $ref: '#/components/schemas/UserTransactionRequest'
      - $ref: '#/components/schemas/UserTransactionSignature'
      - $ref: '#/components/schemas/OnChainTransactionInfo'
      title: User Transaction
      type: object
    BlockMetadataTransaction:
      allOf:
      - $ref: '#/components/schemas/BlockMetadataTransaction_allOf'
      - $ref: '#/components/schemas/OnChainTransactionInfo'
      title: Block Metadata Transaction
      type: object
    GenesisTransaction:
      allOf:
      - $ref: '#/components/schemas/GenesisTransaction_allOf'
      - $ref: '#/components/schemas/OnChainTransactionInfo'
      title: Genesis Transaction
      type: object
    TransactionPayload:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ScriptFunctionPayload'
      - $ref: '#/components/schemas/ScriptPayload'
      - $ref: '#/components/schemas/ModuleBundlePayload'
      - $ref: '#/components/schemas/WriteSetPayload'
      title: Transaction Payload
    ScriptFunctionPayload:
      example:
        type: script_function_payload
        function: 0x1::PaymentScripts::peer_to_peer_with_metadata
        type_arguments:
        - 0x1::XDX::XDX
        arguments:
        - 0x1668f6be25668c1a17cd8caf6b8d2f25
        - "2021000000"
        - 0x
        - 0x
      properties:
        type:
          type: string
        function:
          description: |
            Script function id is string representation of a script function defined on-chain.

            Format: `{address}::{module name}::{function name}`

            Both `module name` and `function name` are case-sensitive.
          example: 0x1::PaymentScripts::peer_to_peer_with_metadata
          title: Script Function ID
          type: string
        type_arguments:
          description: Generic type arguments required by the script function.
          items:
            $ref: '#/components/schemas/MoveTypeTagId'
          type: array
        arguments:
          description: The script function arguments.
          items:
            $ref: '#/components/schemas/MoveValue'
          type: array
      required:
      - arguments
      - function
      - type
      - type_arguments
      title: Script Function Payload
      type: object
    ScriptFunctionId:
      description: |
        Script function id is string representation of a script function defined on-chain.

        Format: `{address}::{module name}::{function name}`

        Both `module name` and `function name` are case-sensitive.
      example: 0x1::PaymentScripts::peer_to_peer_with_metadata
      title: Script Function ID
      type: string
    ScriptPayload:
      properties:
        type:
          example: script_payload
          type: string
        code:
          $ref: '#/components/schemas/MoveScript'
        type_arguments:
          items:
            $ref: '#/components/schemas/MoveTypeTagId'
          type: array
        arguments:
          items:
            $ref: '#/components/schemas/MoveValue'
          type: array
      required:
      - arguments
      - code
      - type
      - type_arguments
      title: Script Payload
      type: object
    ModuleBundlePayload:
      properties:
        type:
          example: module_bundle_payload
          type: string
        modules:
          items:
            $ref: '#/components/schemas/MoveModule'
          type: array
      required:
      - modules
      - type
      title: Module Bundle Payload
      type: object
    WriteSetPayload:
      properties:
        type:
          example: write_set_payload
          type: string
        write_set:
          $ref: '#/components/schemas/WriteSet'
      required:
      - type
      - write_set
      title: WriteSet Payload
      type: object
    WriteSet:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/ScriptWriteSet'
      - $ref: '#/components/schemas/DirectWriteSet'
      title: WriteSet
    ScriptWriteSet:
      properties:
        type:
          example: script_write_set
          type: string
        execute_as:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        script:
          $ref: '#/components/schemas/Script'
      required:
      - execute_as
      - script
      - type
      title: Script WriteSet
      type: object
    DirectWriteSet:
      properties:
        type:
          example: direct_write_set
          type: string
        changes:
          items:
            $ref: '#/components/schemas/WriteSetChange'
          type: array
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
      required:
      - changes
      - events
      - type
      title: Direct WriteSet
      type: object
    WriteSetChange:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/DeleteModule'
      - $ref: '#/components/schemas/DeleteResource'
      - $ref: '#/components/schemas/DeleteTableItem'
      - $ref: '#/components/schemas/WriteModule'
      - $ref: '#/components/schemas/WriteResource'
      - $ref: '#/components/schemas/WriteTableItem'
    DeleteModule:
      properties:
        type:
          example: delete_module
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        address:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        module:
          description: |
            Move module id is a string representation of Move module.

            Format: "{address}::{module name}"

            `address` should be hex-encoded 16 bytes account address
            that is prefixed with `0x` and leading zeros are trimmed.

            Module name is case-sensitive.

            See [doc](https://diem.github.io/move/modules-and-scripts.html#modules) for more details.
          example: 0x1::Aptos
          title: Move Module ID
          type: string
      required:
      - address
      - module
      - state_key_hash
      - type
      title: Delete Module
      type: object
    DeleteResource:
      description: Delete account resource change.
      properties:
        type:
          example: delete_resource
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        address:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        resource:
          description: |
            String representation of an on-chain Move struct type.

            It is a combination of:
              1. `Move module address`, `module name` and `struct name` joined by `::`.
              2. `struct generic type parameters` joined by `, `.

            Examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).

            See [doc](https://diem.github.io/move/structs-and-resources.html) for more details.
          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
          format: move_type
          pattern: ^0x[0-9a-zA-Z:_<>]+$
          title: Move Struct Tag ID
          type: string
      required:
      - address
      - resource
      - state_key_hash
      - type
      title: Delete Resource
      type: object
    DeleteTableItem:
      description: Delete table item change.
      properties:
        type:
          example: delete_table_item
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        data:
          $ref: '#/components/schemas/Table_item_deletion'
      required:
      - data
      - state_key_hash
      - type
      title: Delete Table Item
      type: object
    WriteModule:
      description: Write move module
      properties:
        type:
          example: write_module
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        address:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        data:
          $ref: '#/components/schemas/MoveModule'
      required:
      - address
      - data
      - state_key_hash
      - type
      title: Write Module
      type: object
    WriteResource:
      description: Write account resource
      properties:
        type:
          example: write_resource
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        address:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        data:
          $ref: '#/components/schemas/AccountResource'
      required:
      - address
      - data
      - state_key_hash
      - type
      title: Write Resource
      type: object
    WriteTableItem:
      description: Write table item
      properties:
        type:
          example: write_table_item
          type: string
        state_key_hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        data:
          $ref: '#/components/schemas/Table_item_write'
      required:
      - data
      - state_key_hash
      - type
      title: Write Table Item
      type: object
    Script:
      properties:
        code:
          $ref: '#/components/schemas/MoveScript'
        type_arguments:
          items:
            $ref: '#/components/schemas/MoveTypeTagId'
          type: array
        arguments:
          items:
            $ref: '#/components/schemas/MoveValue'
          type: array
      required:
      - arguments
      - code
      - type_arguments
      title: Script
      type: object
    MoveScript:
      properties:
        bytecode:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        abi:
          $ref: '#/components/schemas/MoveFunction'
      required:
      - bytecode
      title: Move Script
      type: object
    MoveValue:
      description: |
        Move `bool` type value is serialized into `boolean`.

        Move `u8` type value is serialized into `integer`.

        Move `u64` and `u128` type value is serialized into `string`.

        Move `address` type value(16 bytes Aptos account address) is serialized into
        hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.

        For example:
          * `0x1`
          * `0x1668f6be25668c1a17cd8caf6b8d2f25`

        Move `vector` type value is serialized into `array`, except `vector<u8>` which is
        serialized into hex-encoded string with `0x` prefix.

        For example:
          * `vector<u64>{255, 255}` => `["255", "255"]`
          * `vector<u8>{255, 255}` => `0xffff`

        Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):

          ```json
          {
            field1_name: field1_value,
            field2_name: field2_value,
            ......
          }
          ```

        For example:
          `{ "created": "0xa550c18", "role_id": "0" }`

        **Special serialization for Move stdlib types:**

        * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b"hello world"}` is serialized as `"hello world"` in JSON.
      example: "3344000000"
      title: Move Value
    Event:
      description: |
        Event `key` and `sequence_number` are global identifier of the event.

        Event `sequence_number` starts from 0 for each event key.

        Event `type` is the type information of the event `data`, you can use the `type`
        to decode the `data` JSON.
      example:
        key: 0x00000000000000000000000000000000000000000a550c18
        sequence_number: "23"
        type: 0x1::AptosAccount::CreateAccountEvent
        data:
          created: 0xa550c18
          role_id: "0"
      properties:
        key:
          description: |
            Event key is a global index for an event stream.

            It is hex-encoded BCS bytes of `EventHandle` `guid` field value, which is
            a combination of a `uint64` creation number and account address
            (without trimming leading zeros).

            For example, event key `0x00000000000000000000000000000000000000000a550c18`
            is combined by the following 2 parts:
              1. `0000000000000000`: `uint64` representation of `0`.
              2. `0000000000000000000000000a550c18`: 16 bytes of account address.
          example: 0x00000000000000000000000000000000000000000a550c18
          format: hex
          title: Event Key
          type: string
        sequence_number:
          description: |
            Event `sequence_number` is unique id of an event in an event stream.
            Event `sequence_number` starts from 0 for each event key.
          example: "23"
          format: uint64
          title: Event Sequence Number
          type: string
        type:
          description: |
            String representation of an on-chain Move type tag that is exposed in transaction payload.

            Values:
              - bool
              - u8
              - u64
              - u128
              - address
              - signer
              - vector: `vector<{non-reference MoveTypeId}>`
              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`

            Vector type value examples:
              * `vector<u8>`
              * `vector<vector<u64>>`
              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

            Struct type value examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
          example: 0x1::XUS::XUS
          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$
          title: Move Type Tag ID
          type: string
        data:
          description: |
            Move `bool` type value is serialized into `boolean`.

            Move `u8` type value is serialized into `integer`.

            Move `u64` and `u128` type value is serialized into `string`.

            Move `address` type value(16 bytes Aptos account address) is serialized into
            hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.

            For example:
              * `0x1`
              * `0x1668f6be25668c1a17cd8caf6b8d2f25`

            Move `vector` type value is serialized into `array`, except `vector<u8>` which is
            serialized into hex-encoded string with `0x` prefix.

            For example:
              * `vector<u64>{255, 255}` => `["255", "255"]`
              * `vector<u8>{255, 255}` => `0xffff`

            Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):

              ```json
              {
                field1_name: field1_value,
                field2_name: field2_value,
                ......
              }
              ```

            For example:
              `{ "created": "0xa550c18", "role_id": "0" }`

            **Special serialization for Move stdlib types:**

            * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b"hello world"}` is serialized as `"hello world"` in JSON.
          example: "3344000000"
          title: Move Value
      required:
      - data
      - key
      - sequence_number
      - type
      title: Event
      type: object
    TransactionSignature:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Ed25519Signature'
      - $ref: '#/components/schemas/MultiEd25519Signature'
      - $ref: '#/components/schemas/MultiAgentSignature'
      title: Transaction Signature
    Ed25519Signature:
      description: |
        Please refer to https://github.com/aptos-labs/aptos-core/tree/main/specifications/crypto#signature-and-verification for
        more details.
      properties:
        type:
          example: ed25519_signature
          type: string
        public_key:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        signature:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - public_key
      - signature
      - type
      title: Ed25519 Signature
      type: object
    MultiEd25519Signature:
      description: |
        Multi ed25519 signature, please refer to https://github.com/aptos-labs/aptos-core/tree/main/specifications/crypto#multi-signatures for more details.
      properties:
        type:
          example: multi_ed25519_signature
          type: string
        public_keys:
          description: all public keys of the sender account
          items:
            $ref: '#/components/schemas/HexEncodedBytes'
          type: array
        signatures:
          description: signatures created based on the `threshold`
          items:
            $ref: '#/components/schemas/HexEncodedBytes'
          type: array
        threshold:
          description: The threshold of the multi ed25519 account key.
          type: integer
        bitmap:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - bitmap
      - public_keys
      - signatures
      - threshold
      - type
      title: Multi-ed25519 Signature
      type: object
    MultiAgentSignature:
      description: |
        Multi agent signature, please refer to TBD.
      properties:
        type:
          example: multi_agent_signature
          type: string
        sender:
          $ref: '#/components/schemas/AccountSignature'
        secondary_signer_addresses:
          items:
            $ref: '#/components/schemas/Address'
          type: array
        secondary_signers:
          items:
            $ref: '#/components/schemas/AccountSignature'
          type: array
      required:
      - secondary_signer_addresses
      - secondary_signers
      - sender
      - type
      title: Multi-agent Signature
      type: object
    AccountSignature:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Ed25519Signature'
      - $ref: '#/components/schemas/MultiEd25519Signature'
      title: Account Signature
    TableItemRequest:
      example:
        value_type: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
        key_type: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
        key: "3344000000"
      properties:
        key_type:
          description: |
            String representation of an on-chain Move type identifier defined by the Move language.

            Values:
              - bool
              - u8
              - u64
              - u128
              - address
              - signer
              - vector: `vector<{non-reference MoveTypeId}>`
              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`
              - reference: immutable `&` and mutable `&mut` references.
              - generic_type_parameter: it is always start with `T` and following an index number,
                which is the position of the generic type parameter in the `struct` or
                `function` generic type parameters definition.

            Vector type value examples:
              * `vector<u8>`
              * `vector<vector<u64>>`
              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

            Struct type value examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Reference type value examples:
              * `&signer`
              * `&mut address`
              * `&mut vector<u8>`

            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:

                {
                    "name": "TransactionFee",
                    "is_native": false,
                    "abilities": ["key"],
                    "generic_type_params": [
                        {"constraints": [], "is_phantom": true}
                    ],
                    "fields": [
                        { "name": "balance", "type": "0x1::Aptos::Aptos<T0>" },
                        { "name": "preburn", "type": "0x1::Aptos::Preburn<T0>" }
                    ]
                }

            It's Move source code:

                module AptosFramework::TransactionFee {
                    struct TransactionFee<phantom CoinType> has key {
                        balance: Aptos<CoinType>,
                        preburn: Preburn<CoinType>,
                    }
                }

            The `T0` in the above JSON representation is the generic type place holder for
            the `CoinType` in the Move source code.

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut
            )?.+$|T\d+)$
          title: Move Type ID
          type: string
        value_type:
          description: |
            String representation of an on-chain Move type identifier defined by the Move language.

            Values:
              - bool
              - u8
              - u64
              - u128
              - address
              - signer
              - vector: `vector<{non-reference MoveTypeId}>`
              - struct: `{address}::{module_name}::{struct_name}::<{generic types}>`
              - reference: immutable `&` and mutable `&mut` references.
              - generic_type_parameter: it is always start with `T` and following an index number,
                which is the position of the generic type parameter in the `struct` or
                `function` generic type parameters definition.

            Vector type value examples:
              * `vector<u8>`
              * `vector<vector<u64>>`
              * `vector<0x1::AptosAccount::Balance<0x1::XDX::XDX>>`

            Struct type value examples:
              * `0x1::Aptos::Aptos<0x1::XDX::XDX>`
              * `0x1::Abc::Abc<vector<u8>, vector<u64>>`
              * `0x1::AptosAccount::AccountOperationsCapability`

            Reference type value examples:
              * `&signer`
              * `&mut address`
              * `&mut vector<u8>`

            Generic type parameter value example, the following is `0x1::TransactionFee::TransactionFee` JSON representation:

                {
                    "name": "TransactionFee",
                    "is_native": false,
                    "abilities": ["key"],
                    "generic_type_params": [
                        {"constraints": [], "is_phantom": true}
                    ],
                    "fields": [
                        { "name": "balance", "type": "0x1::Aptos::Aptos<T0>" },
                        { "name": "preburn", "type": "0x1::Aptos::Preburn<T0>" }
                    ]
                }

            It's Move source code:

                module AptosFramework::TransactionFee {
                    struct TransactionFee<phantom CoinType> has key {
                        balance: Aptos<CoinType>,
                        preburn: Preburn<CoinType>,
                    }
                }

            The `T0` in the above JSON representation is the generic type place holder for
            the `CoinType` in the Move source code.

            Note:
              1. Empty chars should be ignored when comparing 2 struct tag ids.
              2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).
          example: 0x1::AptosAccount::Balance<0x1::XUS::XUS>
          pattern: ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+|^&(mut
            )?.+$|T\d+)$
          title: Move Type ID
          type: string
        key:
          description: |
            Move `bool` type value is serialized into `boolean`.

            Move `u8` type value is serialized into `integer`.

            Move `u64` and `u128` type value is serialized into `string`.

            Move `address` type value(16 bytes Aptos account address) is serialized into
            hex-encoded string, which is prefixed with `0x` and leading zeros are trimmed.

            For example:
              * `0x1`
              * `0x1668f6be25668c1a17cd8caf6b8d2f25`

            Move `vector` type value is serialized into `array`, except `vector<u8>` which is
            serialized into hex-encoded string with `0x` prefix.

            For example:
              * `vector<u64>{255, 255}` => `["255", "255"]`
              * `vector<u8>{255, 255}` => `0xffff`

            Move `struct` type value is serialized into `object` that looks like this (except some Move stdlib types, see the following section):

              ```json
              {
                field1_name: field1_value,
                field2_name: field2_value,
                ......
              }
              ```

            For example:
              `{ "created": "0xa550c18", "role_id": "0" }`

            **Special serialization for Move stdlib types:**

            * [0x1::ASCII::String](https://github.com/aptos-labs/aptos-core/blob/main/language/move-stdlib/docs/ASCII.md) is serialized into `string`. For example, struct value `0x1::ASCII::String{bytes: b"hello world"}` is serialized as `"hello world"` in JSON.
          example: "3344000000"
          title: Move Value
      required:
      - key
      - key_type
      - value_type
      title: Table item request
      type: object
    inline_response_200:
      example:
        message: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
      properties:
        message:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - message
      type: object
    MoveStruct_generic_type_params:
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/MoveAbility'
          type: array
        is_phantom:
          type: boolean
      required:
      - constraints
      - is_phantom
      type: object
    MoveFunction_generic_type_params:
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/MoveAbility'
          type: array
      required:
      - constraints
      type: object
    PendingTransaction_allOf:
      properties:
        type:
          example: pending_transaction
          type: string
        hash:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - hash
      - type
    UserTransaction_allOf:
      properties:
        type:
          example: user_transaction
          type: string
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        timestamp:
          description: |
            Timestamp in microseconds, e.g. ledger / block creation timestamp.
          example: "1632507671675208"
          format: uint64
          title: Timestamp in Microseconds
          type: string
      required:
      - events
      - timestamp
      - type
    BlockMetadataTransaction_allOf:
      properties:
        type:
          example: block_metadata_transaction
          type: string
        id:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        round:
          description: Unsigned int64 type value
          example: "32425224034"
          format: uint64
          title: uint64
          type: string
        previous_block_votes:
          items:
            $ref: '#/components/schemas/Address'
          type: array
        proposer:
          description: |
            Hex-encoded 16 bytes Aptos account address.

            Prefixed with `0x` and leading zeros are trimmed.

            See [doc](https://diem.github.io/move/address.html) for more details.
          example: 0xdd
          format: address
          title: Account Address
          type: string
        timestamp:
          description: |
            Timestamp in microseconds, e.g. ledger / block creation timestamp.
          example: "1632507671675208"
          format: uint64
          title: Timestamp in Microseconds
          type: string
      required:
      - id
      - previous_block_votes
      - proposer
      - round
      - timestamp
      - type
    GenesisTransaction_allOf:
      properties:
        type:
          example: genesis_transaction
          type: string
        events:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        payload:
          $ref: '#/components/schemas/WriteSetPayload'
      required:
      - events
      - payload
      - type
    Table_item_deletion:
      properties:
        handle:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        key:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - handle
      - key
      title: Table item deletion
      type: object
    Table_item_write:
      properties:
        handle:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        key:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
        value:
          description: |
            All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
            two hex digits per byte.

            Different with `Address` type, hex-encoded bytes should not trim any zeros.
          example: 0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1
          format: hex
          title: Hex-encoded Bytes
          type: string
      required:
      - handle
      - key
      - value
      title: Table item write
      type: object
